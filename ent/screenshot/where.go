// Code generated by ent, DO NOT EDIT.

package screenshot

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/s4kibs4mi/snapify/ent/predicate"
	"github.com/s4kibs4mi/snapify/models"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Screenshot {
	return predicate.Screenshot(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Screenshot {
	return predicate.Screenshot(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Screenshot {
	return predicate.Screenshot(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Screenshot {
	return predicate.Screenshot(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Screenshot {
	return predicate.Screenshot(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Screenshot {
	return predicate.Screenshot(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Screenshot {
	return predicate.Screenshot(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Screenshot {
	return predicate.Screenshot(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Screenshot {
	return predicate.Screenshot(sql.FieldLTE(FieldID, id))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v models.Status) predicate.Screenshot {
	vc := string(v)
	return predicate.Screenshot(sql.FieldEQ(FieldStatus, vc))
}

// URL applies equality check predicate on the "url" field. It's identical to URLEQ.
func URL(v string) predicate.Screenshot {
	return predicate.Screenshot(sql.FieldEQ(FieldURL, v))
}

// StoredPath applies equality check predicate on the "stored_path" field. It's identical to StoredPathEQ.
func StoredPath(v string) predicate.Screenshot {
	return predicate.Screenshot(sql.FieldEQ(FieldStoredPath, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Screenshot {
	return predicate.Screenshot(sql.FieldEQ(FieldCreatedAt, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v models.Status) predicate.Screenshot {
	vc := string(v)
	return predicate.Screenshot(sql.FieldEQ(FieldStatus, vc))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v models.Status) predicate.Screenshot {
	vc := string(v)
	return predicate.Screenshot(sql.FieldNEQ(FieldStatus, vc))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...models.Status) predicate.Screenshot {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.Screenshot(sql.FieldIn(FieldStatus, v...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...models.Status) predicate.Screenshot {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.Screenshot(sql.FieldNotIn(FieldStatus, v...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v models.Status) predicate.Screenshot {
	vc := string(v)
	return predicate.Screenshot(sql.FieldGT(FieldStatus, vc))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v models.Status) predicate.Screenshot {
	vc := string(v)
	return predicate.Screenshot(sql.FieldGTE(FieldStatus, vc))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v models.Status) predicate.Screenshot {
	vc := string(v)
	return predicate.Screenshot(sql.FieldLT(FieldStatus, vc))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v models.Status) predicate.Screenshot {
	vc := string(v)
	return predicate.Screenshot(sql.FieldLTE(FieldStatus, vc))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v models.Status) predicate.Screenshot {
	vc := string(v)
	return predicate.Screenshot(sql.FieldContains(FieldStatus, vc))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v models.Status) predicate.Screenshot {
	vc := string(v)
	return predicate.Screenshot(sql.FieldHasPrefix(FieldStatus, vc))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v models.Status) predicate.Screenshot {
	vc := string(v)
	return predicate.Screenshot(sql.FieldHasSuffix(FieldStatus, vc))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v models.Status) predicate.Screenshot {
	vc := string(v)
	return predicate.Screenshot(sql.FieldEqualFold(FieldStatus, vc))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v models.Status) predicate.Screenshot {
	vc := string(v)
	return predicate.Screenshot(sql.FieldContainsFold(FieldStatus, vc))
}

// URLEQ applies the EQ predicate on the "url" field.
func URLEQ(v string) predicate.Screenshot {
	return predicate.Screenshot(sql.FieldEQ(FieldURL, v))
}

// URLNEQ applies the NEQ predicate on the "url" field.
func URLNEQ(v string) predicate.Screenshot {
	return predicate.Screenshot(sql.FieldNEQ(FieldURL, v))
}

// URLIn applies the In predicate on the "url" field.
func URLIn(vs ...string) predicate.Screenshot {
	return predicate.Screenshot(sql.FieldIn(FieldURL, vs...))
}

// URLNotIn applies the NotIn predicate on the "url" field.
func URLNotIn(vs ...string) predicate.Screenshot {
	return predicate.Screenshot(sql.FieldNotIn(FieldURL, vs...))
}

// URLGT applies the GT predicate on the "url" field.
func URLGT(v string) predicate.Screenshot {
	return predicate.Screenshot(sql.FieldGT(FieldURL, v))
}

// URLGTE applies the GTE predicate on the "url" field.
func URLGTE(v string) predicate.Screenshot {
	return predicate.Screenshot(sql.FieldGTE(FieldURL, v))
}

// URLLT applies the LT predicate on the "url" field.
func URLLT(v string) predicate.Screenshot {
	return predicate.Screenshot(sql.FieldLT(FieldURL, v))
}

// URLLTE applies the LTE predicate on the "url" field.
func URLLTE(v string) predicate.Screenshot {
	return predicate.Screenshot(sql.FieldLTE(FieldURL, v))
}

// URLContains applies the Contains predicate on the "url" field.
func URLContains(v string) predicate.Screenshot {
	return predicate.Screenshot(sql.FieldContains(FieldURL, v))
}

// URLHasPrefix applies the HasPrefix predicate on the "url" field.
func URLHasPrefix(v string) predicate.Screenshot {
	return predicate.Screenshot(sql.FieldHasPrefix(FieldURL, v))
}

// URLHasSuffix applies the HasSuffix predicate on the "url" field.
func URLHasSuffix(v string) predicate.Screenshot {
	return predicate.Screenshot(sql.FieldHasSuffix(FieldURL, v))
}

// URLEqualFold applies the EqualFold predicate on the "url" field.
func URLEqualFold(v string) predicate.Screenshot {
	return predicate.Screenshot(sql.FieldEqualFold(FieldURL, v))
}

// URLContainsFold applies the ContainsFold predicate on the "url" field.
func URLContainsFold(v string) predicate.Screenshot {
	return predicate.Screenshot(sql.FieldContainsFold(FieldURL, v))
}

// StoredPathEQ applies the EQ predicate on the "stored_path" field.
func StoredPathEQ(v string) predicate.Screenshot {
	return predicate.Screenshot(sql.FieldEQ(FieldStoredPath, v))
}

// StoredPathNEQ applies the NEQ predicate on the "stored_path" field.
func StoredPathNEQ(v string) predicate.Screenshot {
	return predicate.Screenshot(sql.FieldNEQ(FieldStoredPath, v))
}

// StoredPathIn applies the In predicate on the "stored_path" field.
func StoredPathIn(vs ...string) predicate.Screenshot {
	return predicate.Screenshot(sql.FieldIn(FieldStoredPath, vs...))
}

// StoredPathNotIn applies the NotIn predicate on the "stored_path" field.
func StoredPathNotIn(vs ...string) predicate.Screenshot {
	return predicate.Screenshot(sql.FieldNotIn(FieldStoredPath, vs...))
}

// StoredPathGT applies the GT predicate on the "stored_path" field.
func StoredPathGT(v string) predicate.Screenshot {
	return predicate.Screenshot(sql.FieldGT(FieldStoredPath, v))
}

// StoredPathGTE applies the GTE predicate on the "stored_path" field.
func StoredPathGTE(v string) predicate.Screenshot {
	return predicate.Screenshot(sql.FieldGTE(FieldStoredPath, v))
}

// StoredPathLT applies the LT predicate on the "stored_path" field.
func StoredPathLT(v string) predicate.Screenshot {
	return predicate.Screenshot(sql.FieldLT(FieldStoredPath, v))
}

// StoredPathLTE applies the LTE predicate on the "stored_path" field.
func StoredPathLTE(v string) predicate.Screenshot {
	return predicate.Screenshot(sql.FieldLTE(FieldStoredPath, v))
}

// StoredPathContains applies the Contains predicate on the "stored_path" field.
func StoredPathContains(v string) predicate.Screenshot {
	return predicate.Screenshot(sql.FieldContains(FieldStoredPath, v))
}

// StoredPathHasPrefix applies the HasPrefix predicate on the "stored_path" field.
func StoredPathHasPrefix(v string) predicate.Screenshot {
	return predicate.Screenshot(sql.FieldHasPrefix(FieldStoredPath, v))
}

// StoredPathHasSuffix applies the HasSuffix predicate on the "stored_path" field.
func StoredPathHasSuffix(v string) predicate.Screenshot {
	return predicate.Screenshot(sql.FieldHasSuffix(FieldStoredPath, v))
}

// StoredPathIsNil applies the IsNil predicate on the "stored_path" field.
func StoredPathIsNil() predicate.Screenshot {
	return predicate.Screenshot(sql.FieldIsNull(FieldStoredPath))
}

// StoredPathNotNil applies the NotNil predicate on the "stored_path" field.
func StoredPathNotNil() predicate.Screenshot {
	return predicate.Screenshot(sql.FieldNotNull(FieldStoredPath))
}

// StoredPathEqualFold applies the EqualFold predicate on the "stored_path" field.
func StoredPathEqualFold(v string) predicate.Screenshot {
	return predicate.Screenshot(sql.FieldEqualFold(FieldStoredPath, v))
}

// StoredPathContainsFold applies the ContainsFold predicate on the "stored_path" field.
func StoredPathContainsFold(v string) predicate.Screenshot {
	return predicate.Screenshot(sql.FieldContainsFold(FieldStoredPath, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Screenshot {
	return predicate.Screenshot(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Screenshot {
	return predicate.Screenshot(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Screenshot {
	return predicate.Screenshot(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Screenshot {
	return predicate.Screenshot(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Screenshot {
	return predicate.Screenshot(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Screenshot {
	return predicate.Screenshot(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Screenshot {
	return predicate.Screenshot(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Screenshot {
	return predicate.Screenshot(sql.FieldLTE(FieldCreatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Screenshot) predicate.Screenshot {
	return predicate.Screenshot(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Screenshot) predicate.Screenshot {
	return predicate.Screenshot(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Screenshot) predicate.Screenshot {
	return predicate.Screenshot(func(s *sql.Selector) {
		p(s.Not())
	})
}
