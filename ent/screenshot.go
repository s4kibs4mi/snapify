// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/s4kibs4mi/snapify/ent/screenshot"
	"github.com/s4kibs4mi/snapify/models"
)

// Screenshot is the model entity for the Screenshot schema.
type Screenshot struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Status holds the value of the "status" field.
	Status models.Status `json:"status,omitempty"`
	// URL holds the value of the "url" field.
	URL string `json:"url,omitempty"`
	// StoredPath holds the value of the "stored_path" field.
	StoredPath *string `json:"stored_path,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Screenshot) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case screenshot.FieldStatus, screenshot.FieldURL, screenshot.FieldStoredPath:
			values[i] = new(sql.NullString)
		case screenshot.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case screenshot.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Screenshot", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Screenshot fields.
func (s *Screenshot) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case screenshot.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				s.ID = *value
			}
		case screenshot.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				s.Status = models.Status(value.String)
			}
		case screenshot.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				s.URL = value.String
			}
		case screenshot.FieldStoredPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field stored_path", values[i])
			} else if value.Valid {
				s.StoredPath = new(string)
				*s.StoredPath = value.String
			}
		case screenshot.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Screenshot.
// Note that you need to call Screenshot.Unwrap() before calling this method if this Screenshot
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Screenshot) Update() *ScreenshotUpdateOne {
	return NewScreenshotClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Screenshot entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Screenshot) Unwrap() *Screenshot {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Screenshot is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Screenshot) String() string {
	var builder strings.Builder
	builder.WriteString("Screenshot(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", s.Status))
	builder.WriteString(", ")
	builder.WriteString("url=")
	builder.WriteString(s.URL)
	builder.WriteString(", ")
	if v := s.StoredPath; v != nil {
		builder.WriteString("stored_path=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(s.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Screenshots is a parsable slice of Screenshot.
type Screenshots []*Screenshot
