// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/s4kibs4mi/snapify/ent/predicate"
	"github.com/s4kibs4mi/snapify/ent/screenshot"
	"github.com/s4kibs4mi/snapify/models"
)

// ScreenshotUpdate is the builder for updating Screenshot entities.
type ScreenshotUpdate struct {
	config
	hooks    []Hook
	mutation *ScreenshotMutation
}

// Where appends a list predicates to the ScreenshotUpdate builder.
func (su *ScreenshotUpdate) Where(ps ...predicate.Screenshot) *ScreenshotUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetStatus sets the "status" field.
func (su *ScreenshotUpdate) SetStatus(m models.Status) *ScreenshotUpdate {
	su.mutation.SetStatus(m)
	return su
}

// SetURL sets the "url" field.
func (su *ScreenshotUpdate) SetURL(s string) *ScreenshotUpdate {
	su.mutation.SetURL(s)
	return su
}

// SetStoredPath sets the "stored_path" field.
func (su *ScreenshotUpdate) SetStoredPath(s string) *ScreenshotUpdate {
	su.mutation.SetStoredPath(s)
	return su
}

// SetNillableStoredPath sets the "stored_path" field if the given value is not nil.
func (su *ScreenshotUpdate) SetNillableStoredPath(s *string) *ScreenshotUpdate {
	if s != nil {
		su.SetStoredPath(*s)
	}
	return su
}

// ClearStoredPath clears the value of the "stored_path" field.
func (su *ScreenshotUpdate) ClearStoredPath() *ScreenshotUpdate {
	su.mutation.ClearStoredPath()
	return su
}

// SetCreatedAt sets the "created_at" field.
func (su *ScreenshotUpdate) SetCreatedAt(t time.Time) *ScreenshotUpdate {
	su.mutation.SetCreatedAt(t)
	return su
}

// Mutation returns the ScreenshotMutation object of the builder.
func (su *ScreenshotUpdate) Mutation() *ScreenshotMutation {
	return su.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *ScreenshotUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, ScreenshotMutation](ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *ScreenshotUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *ScreenshotUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *ScreenshotUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *ScreenshotUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(screenshot.Table, screenshot.Columns, sqlgraph.NewFieldSpec(screenshot.FieldID, field.TypeUUID))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Status(); ok {
		_spec.SetField(screenshot.FieldStatus, field.TypeString, value)
	}
	if value, ok := su.mutation.URL(); ok {
		_spec.SetField(screenshot.FieldURL, field.TypeString, value)
	}
	if value, ok := su.mutation.StoredPath(); ok {
		_spec.SetField(screenshot.FieldStoredPath, field.TypeString, value)
	}
	if su.mutation.StoredPathCleared() {
		_spec.ClearField(screenshot.FieldStoredPath, field.TypeString)
	}
	if value, ok := su.mutation.CreatedAt(); ok {
		_spec.SetField(screenshot.FieldCreatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{screenshot.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// ScreenshotUpdateOne is the builder for updating a single Screenshot entity.
type ScreenshotUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ScreenshotMutation
}

// SetStatus sets the "status" field.
func (suo *ScreenshotUpdateOne) SetStatus(m models.Status) *ScreenshotUpdateOne {
	suo.mutation.SetStatus(m)
	return suo
}

// SetURL sets the "url" field.
func (suo *ScreenshotUpdateOne) SetURL(s string) *ScreenshotUpdateOne {
	suo.mutation.SetURL(s)
	return suo
}

// SetStoredPath sets the "stored_path" field.
func (suo *ScreenshotUpdateOne) SetStoredPath(s string) *ScreenshotUpdateOne {
	suo.mutation.SetStoredPath(s)
	return suo
}

// SetNillableStoredPath sets the "stored_path" field if the given value is not nil.
func (suo *ScreenshotUpdateOne) SetNillableStoredPath(s *string) *ScreenshotUpdateOne {
	if s != nil {
		suo.SetStoredPath(*s)
	}
	return suo
}

// ClearStoredPath clears the value of the "stored_path" field.
func (suo *ScreenshotUpdateOne) ClearStoredPath() *ScreenshotUpdateOne {
	suo.mutation.ClearStoredPath()
	return suo
}

// SetCreatedAt sets the "created_at" field.
func (suo *ScreenshotUpdateOne) SetCreatedAt(t time.Time) *ScreenshotUpdateOne {
	suo.mutation.SetCreatedAt(t)
	return suo
}

// Mutation returns the ScreenshotMutation object of the builder.
func (suo *ScreenshotUpdateOne) Mutation() *ScreenshotMutation {
	return suo.mutation
}

// Where appends a list predicates to the ScreenshotUpdate builder.
func (suo *ScreenshotUpdateOne) Where(ps ...predicate.Screenshot) *ScreenshotUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *ScreenshotUpdateOne) Select(field string, fields ...string) *ScreenshotUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Screenshot entity.
func (suo *ScreenshotUpdateOne) Save(ctx context.Context) (*Screenshot, error) {
	return withHooks[*Screenshot, ScreenshotMutation](ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *ScreenshotUpdateOne) SaveX(ctx context.Context) *Screenshot {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *ScreenshotUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *ScreenshotUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *ScreenshotUpdateOne) sqlSave(ctx context.Context) (_node *Screenshot, err error) {
	_spec := sqlgraph.NewUpdateSpec(screenshot.Table, screenshot.Columns, sqlgraph.NewFieldSpec(screenshot.FieldID, field.TypeUUID))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Screenshot.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, screenshot.FieldID)
		for _, f := range fields {
			if !screenshot.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != screenshot.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Status(); ok {
		_spec.SetField(screenshot.FieldStatus, field.TypeString, value)
	}
	if value, ok := suo.mutation.URL(); ok {
		_spec.SetField(screenshot.FieldURL, field.TypeString, value)
	}
	if value, ok := suo.mutation.StoredPath(); ok {
		_spec.SetField(screenshot.FieldStoredPath, field.TypeString, value)
	}
	if suo.mutation.StoredPathCleared() {
		_spec.ClearField(screenshot.FieldStoredPath, field.TypeString)
	}
	if value, ok := suo.mutation.CreatedAt(); ok {
		_spec.SetField(screenshot.FieldCreatedAt, field.TypeTime, value)
	}
	_node = &Screenshot{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{screenshot.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
